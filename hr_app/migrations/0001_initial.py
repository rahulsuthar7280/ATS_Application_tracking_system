# Generated by Django 5.2.3 on 2025-09-15 17:13

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.files.storage
import django.db.models.deletion
import django.utils.timezone
import hr_app.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('user', 'User'), ('admin', 'Admin'), ('superadmin', 'Superadmin')], default='user', max_length=20)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_users', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='hr_app_user_set', related_query_name='hr_app_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='hr_app_user_permissions_set', related_query_name='hr_app_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CareerPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('date_posted', models.DateTimeField(auto_now_add=True)),
                ('location', models.CharField(max_length=100)),
                ('job_type', models.CharField(max_length=50)),
                ('salary', models.CharField(max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('description', models.TextField()),
                ('responsibilities', models.TextField()),
                ('qualifications', models.TextField()),
            ],
            options={
                'ordering': ['-date_posted'],
            },
        ),
        migrations.CreateModel(
            name='Folder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('job_level', models.CharField(choices=[('entry', 'Entry Level'), ('mid', 'Mid-Level'), ('senior', 'Senior Level'), ('executive', 'Executive')], default='mid', max_length=10)),
                ('company_name', models.CharField(max_length=200)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('country', models.CharField(max_length=100)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='EmailConfiguration',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('email_host', models.CharField(help_text='SMTP server address (e.g., smtp.gmail.com)', max_length=255)),
                ('email_port', models.IntegerField(blank=True, default=587, help_text='SMTP port number (e.g., 587)', null=True)),
                ('imap_host', models.CharField(default='imap.zoho.in', help_text='IMAP server address (e.g., imap.gmail.com)', max_length=255)),
                ('imap_port', models.IntegerField(default=993, help_text='IMAP port number (e.g., 993 for SSL)')),
                ('email_host_user', models.CharField(help_text='Email address for authentication', max_length=255)),
                ('email_host_password', models.CharField(help_text='Password or app-specific password for the email account', max_length=255)),
                ('email_use_tls', models.BooleanField(default=True, help_text='Use a TLS secure connection')),
                ('email_use_ssl', models.BooleanField(default=False, help_text='Use a SSL secure connection')),
                ('email_from', models.CharField(blank=True, help_text="Sender's email address. If blank, uses the host user.", max_length=255)),
            ],
            options={
                'verbose_name': 'Email Configuration',
            },
        ),
        migrations.CreateModel(
            name='CandidateAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(blank=True, max_length=255, null=True)),
                ('job_role', models.CharField(blank=True, max_length=255, null=True)),
                ('phone_no', models.CharField(blank=True, max_length=50, null=True)),
                ('hiring_recommendation', models.CharField(blank=True, max_length=50, null=True)),
                ('suggested_salary_range', models.CharField(blank=True, max_length=100, null=True)),
                ('interview_questions', models.TextField(blank=True, null=True)),
                ('analysis_summary', models.TextField(blank=True, null=True)),
                ('experience_match', models.CharField(blank=True, max_length=50, null=True)),
                ('overall_experience', models.CharField(blank=True, max_length=50, null=True)),
                ('current_company_name', models.CharField(blank=True, max_length=255, null=True)),
                ('current_company_address', models.CharField(blank=True, max_length=255, null=True)),
                ('fitment_verdict', models.CharField(blank=True, max_length=50, null=True)),
                ('aggregate_score', models.CharField(blank=True, max_length=50, null=True)),
                ('strategic_alignment', models.TextField(blank=True, null=True)),
                ('quantifiable_impact', models.TextField(blank=True, null=True)),
                ('potential_gaps_risks', models.TextField(blank=True, null=True)),
                ('comparable_experience', models.TextField(blank=True, null=True)),
                ('scoring_matrix_json', models.TextField(blank=True, null=True)),
                ('bench_recommendation_json', models.TextField(blank=True, null=True)),
                ('alternative_role_recommendations_json', models.TextField(blank=True, null=True)),
                ('automated_recruiter_insights_json', models.TextField(blank=True, null=True)),
                ('candidate_overview', models.TextField(blank=True, null=True)),
                ('technical_prowess_json', models.TextField(blank=True, null=True)),
                ('project_impact_json', models.TextField(blank=True, null=True)),
                ('education_certifications_json', models.TextField(blank=True, null=True)),
                ('overall_rating_summary', models.CharField(blank=True, max_length=50, null=True)),
                ('conclusion_summary', models.TextField(blank=True, null=True)),
                ('bland_call_id', models.CharField(blank=True, max_length=100, null=True)),
                ('interview_status', models.CharField(blank=True, default='Pending', max_length=50, null=True)),
                ('resume_file_path', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('final_decision', models.CharField(blank=True, choices=[('shortlisted', 'Shortlisted'), ('selected', 'Selected'), ('not_selected', 'Not Selected')], default='Pending', max_length=20, null=True)),
                ('final_salary', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('analysis_type', models.CharField(choices=[('Manual', 'Manual ATS Analysis'), ('Basic', 'Basic ATS Analysis'), ('Advance', 'Advanced ATS Analysis')], default='Manual', help_text='Type of resume analysis (Basic or Advanced).', max_length=10)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Apply_career',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('resume', models.FileField(upload_to='resumes/')),
                ('cover_letter', models.FileField(blank=True, null=True, upload_to='cover_letters/')),
                ('linkedin_url', models.URLField(blank=True, null=True)),
                ('date_applied', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applications', to=settings.AUTH_USER_MODEL)),
                ('career', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='career', to='hr_app.careerpage')),
            ],
        ),
        migrations.CreateModel(
            name='DraftEmail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipient_emails', models.TextField(blank=True)),
                ('subject', models.CharField(blank=True, max_length=255)),
                ('body', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=hr_app.models.document_upload_path)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('folder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='hr_app.folder')),
            ],
        ),
        migrations.CreateModel(
            name='JobDescriptionDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='A descriptive title for the job description.', max_length=255)),
                ('company_name', models.CharField(blank=True, help_text='The name of the company posting the job.', max_length=255, null=True)),
                ('job_level', models.CharField(blank=True, choices=[('intern', 'Intern'), ('junior', 'Junior'), ('mid', 'Mid-Level'), ('senior', 'Senior'), ('lead', 'Lead'), ('manager', 'Manager'), ('director', 'Director'), ('vp', 'Vice President')], default='mid', help_text='The experience level required for this position.', max_length=50, null=True)),
                ('department', models.CharField(blank=True, help_text='The department or team this role belongs to.', max_length=100, null=True)),
                ('country', models.CharField(blank=True, help_text='The country for the job location.', max_length=100, null=True)),
                ('state', models.CharField(blank=True, help_text='The state for the job location.', max_length=100, null=True)),
                ('city', models.CharField(blank=True, help_text='The city for the job location.', max_length=100, null=True)),
                ('employment_type', models.CharField(blank=True, choices=[('full-time', 'Full-time'), ('part-time', 'Part-time'), ('contract', 'Contract'), ('temporary', 'Temporary'), ('internship', 'Internship')], default='full-time', help_text='Type of employment (e.g., Full-time, Contract).', max_length=50, null=True)),
                ('salary_min', models.IntegerField(blank=True, help_text='The minimum salary for the position.', null=True)),
                ('salary_max', models.IntegerField(blank=True, help_text='The maximum salary for the position.', null=True)),
                ('salary_frequency', models.CharField(blank=True, choices=[('hourly', 'Hourly'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('yearly', 'Yearly')], help_text='The frequency of the salary payment (e.g., Yearly, Hourly).', max_length=50, null=True)),
                ('overview', models.TextField(blank=True, help_text='A brief overview of the role and its purpose.', null=True)),
                ('responsibilities', models.TextField(blank=True, help_text='Key duties and responsibilities for this role.', null=True)),
                ('required_skills', models.TextField(blank=True, help_text='Mandatory skills and qualifications (e.g., Python, AWS, Agile).', null=True)),
                ('preferred_skills', models.TextField(blank=True, help_text='Desirable but not mandatory skills.', null=True)),
                ('education_experience', models.TextField(blank=True, help_text='Required education and work experience.', null=True)),
                ('benefits', models.TextField(blank=True, help_text='Company benefits and perks.', null=True)),
                ('job_description', models.TextField(blank=True, help_text='The full, detailed description of the job role.', null=True)),
                ('file', models.FileField(blank=True, help_text='The uploaded job description file (optional if created via text).', null=True, storage=django.core.files.storage.FileSystemStorage(location='media/job_descriptions'), upload_to='')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Job Description Document',
                'verbose_name_plural': 'Job Description Documents',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('candidate_name', models.CharField(blank=True, max_length=255, null=True)),
                ('from_email', models.EmailField(blank=True, help_text='Email address of the sender.', max_length=255, null=True)),
                ('delivery_date', models.DateTimeField(blank=True, help_text='Date and time the application was received.', null=True)),
                ('experience', models.IntegerField(blank=True, help_text='Total years of professional experience.', null=True)),
                ('mobile_number', models.CharField(blank=True, max_length=50, null=True)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('email_address', models.EmailField(blank=True, help_text='Email address found in the resume.', max_length=255, null=True)),
                ('subject', models.CharField(blank=True, max_length=500, null=True)),
                ('resume_url', models.URLField(blank=True, help_text='URL to the downloaded resume file.', max_length=1000, null=True, unique=True)),
                ('remark', models.CharField(blank=True, max_length=500, null=True)),
                ('job_role', models.CharField(blank=True, max_length=255, null=True)),
                ('analysis_type', models.CharField(blank=True, help_text='Type of analysis performed: basic or advanced.', max_length=20, null=True)),
                ('match_score', models.DecimalField(blank=True, decimal_places=2, help_text='Match score from the advanced analysis.', max_digits=5, null=True)),
                ('match_summary', models.TextField(blank=True, help_text='Summary of the match between the resume and job description.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('job_description', models.ForeignKey(blank=True, help_text='The job description associated with this application.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='hr_app.jobdescriptiondocument')),
            ],
            options={
                'verbose_name': 'Incoming Application',
                'verbose_name_plural': 'Incoming Applications',
                'ordering': ['-delivery_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='JobPosting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform', models.CharField(choices=[('linkedin', 'LinkedIn'), ('indeed', 'Indeed'), ('glassdoor', 'Glassdoor'), ('shine', 'Shine'), ('naukri', 'Naukri'), ('company_website', 'Company Website'), ('other', 'Other')], help_text='The platform where the job was posted.', max_length=50)),
                ('posting_url', models.URLField(blank=True, help_text='The direct URL to the job posting on the platform.', max_length=500, null=True)),
                ('posted_at', models.DateTimeField(auto_now_add=True)),
                ('job_description', models.ForeignKey(help_text='The job description this posting is for.', on_delete=django.db.models.deletion.CASCADE, related_name='postings', to='hr_app.job')),
            ],
        ),
        migrations.CreateModel(
            name='SentEmail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipient_emails', models.TextField()),
                ('subject', models.CharField(max_length=255)),
                ('body', models.TextField()),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
