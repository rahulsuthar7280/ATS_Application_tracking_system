# Generated by Django 5.2.3 on 2025-08-06 12:50

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CandidateAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(blank=True, max_length=255, null=True)),
                ('job_role', models.CharField(blank=True, max_length=255, null=True)),
                ('phone_no', models.CharField(blank=True, max_length=50, null=True)),
                ('hiring_recommendation', models.CharField(blank=True, max_length=50, null=True)),
                ('suggested_salary_range', models.CharField(blank=True, max_length=100, null=True)),
                ('interview_questions', models.TextField(blank=True, null=True)),
                ('analysis_summary', models.TextField(blank=True, null=True)),
                ('experience_match', models.CharField(blank=True, max_length=50, null=True)),
                ('overall_experience', models.CharField(blank=True, max_length=50, null=True)),
                ('current_company_name', models.CharField(blank=True, max_length=255, null=True)),
                ('current_company_address', models.CharField(blank=True, max_length=255, null=True)),
                ('fitment_verdict', models.CharField(blank=True, max_length=50, null=True)),
                ('aggregate_score', models.CharField(blank=True, max_length=50, null=True)),
                ('strategic_alignment', models.TextField(blank=True, null=True)),
                ('quantifiable_impact', models.TextField(blank=True, null=True)),
                ('potential_gaps_risks', models.TextField(blank=True, null=True)),
                ('comparable_experience', models.TextField(blank=True, null=True)),
                ('scoring_matrix_json', models.TextField(blank=True, null=True)),
                ('bench_recommendation_json', models.TextField(blank=True, null=True)),
                ('alternative_role_recommendations_json', models.TextField(blank=True, null=True)),
                ('automated_recruiter_insights_json', models.TextField(blank=True, null=True)),
                ('candidate_overview', models.TextField(blank=True, null=True)),
                ('technical_prowess_json', models.TextField(blank=True, null=True)),
                ('project_impact_json', models.TextField(blank=True, null=True)),
                ('education_certifications_json', models.TextField(blank=True, null=True)),
                ('overall_rating_summary', models.CharField(blank=True, max_length=50, null=True)),
                ('conclusion_summary', models.TextField(blank=True, null=True)),
                ('bland_call_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('final_decision', models.CharField(blank=True, choices=[('shortlisted', 'Shortlisted'), ('selected', 'Selected'), ('not_selected', 'Not Selected')], default='shortlisted', max_length=20, null=True)),
                ('final_salary', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('user', 'User'), ('admin', 'Admin'), ('superadmin', 'Superadmin')], default='user', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='hr_app_user_set', related_query_name='hr_app_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='hr_app_user_permissions_set', related_query_name='hr_app_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
